
import { useEffect, useState, useContext } from 'react';
import {
    Box, CardContent, CardHeader, Typography,
    Chip, List, ListItem, ListItemIcon, ListItemText,
    Accordion, AccordionSummary, AccordionDetails,
    CircularProgress, Container, Button
} from '@mui/material';
import MemoryIcon from '@mui/icons-material/Memory';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import PsychologyIcon from '@mui/icons-material/Psychology';
import axiosInstance from '../axiosInstance'; // Adjust the import based on your axios instance setup
import { AuthContext } from '../context/AuthContext'; // Assuming you have an AuthContext for user authentication
import { useSnackbar } from '../Context/SnackBarContext.jsx';
import { AcUnit } from "@mui/icons-material";

export default function Reflection() {
    const [reflection, setReflection] = useState(null);
    const [loading, setLoading] = useState(true);
    const { user } = useContext(AuthContext); // Assuming you have an AuthContext to get the current user

    const showSnackbar = useSnackbar();

    const fetchReflection = async () => {
        setLoading(true);
        try {
            const res = await axiosInstance.get(`/api/user/reflection/${user._id}`);
            setReflection(res.data);
        } catch (error) {
            console.error('Failed to fetch reflection:', error);
            showSnackbar(`Failed to fetch reflection : ${error.status} : ${error.response?.data?.message || error.message}`);
            setReflection(null);
        }
        setLoading(false);
    };

    useEffect(() => {
        fetchReflection();
    }, [user]);

    if (loading) {
        return (
            <Box display="flex" justifyContent="center" mt={10}>
                <CircularProgress />
            </Box>
        );
    }

    if (!reflection) return (
        <Box mt={5} textAlign="center">
            <Button
                variant="contained"
                onClick={fetchReflection}
                sx={{
                    mt: 5,
                    px: 5,
                    py: 1.6,
                    fontSize: '1rem',
                    backgroundColor: '#0ca37f',
                    borderRadius: '30px',
                    textTransform: 'none',
                    fontWeight: 600,
                    '&:hover': {
                        backgroundColor: '#089a72',
                    },
                }}
            >
                <strong>Generate Reflection</strong>
            </Button>
        </Box>
    );

    return (
        <Container sx={{ mt: 5 }}>
            <Box sx={{ backgroundColor: 'none' }}>
                <CardHeader
                    title="Weekly Reflection"
                    subheader="Generated by JARVIS"
                />
                <CardContent>
                    <Typography variant="h6" gutterBottom>
                        Summary
                    </Typography>
                    <Typography variant="body1" color="text.secondary">
                        {reflection.summary}
                    </Typography>

                    <Box mt={4}>
                        <Typography variant="h6" gutterBottom>
                            Themes
                        </Typography>
                        <Box display="flex" gap={1} flexWrap="wrap">
                            {reflection.themes.map((theme, index) => (
                                <Chip key={index} label={theme} icon={<PsychologyIcon />} sx={{ backgroundColor: '#0ca37f' }} />
                            ))}
                        </Box>
                    </Box>

                    <Box mt={4}>
                        <Typography variant="h6" gutterBottom>
                            Suggestions
                        </Typography>
                        <List>
                            {reflection.suggestions.map((suggestion, index) => (
                                <ListItem key={index}>
                                    <ListItemIcon>
                                        <AcUnit sx={{ color: '#0ca37f' }} />
                                    </ListItemIcon>
                                    <ListItemText primary={suggestion} />
                                </ListItem>
                            ))}
                        </List>
                    </Box>

                    <Box mt={4}>
                        <Typography variant="h6" gutterBottom>
                            Memories Reviewed
                        </Typography>
                        {reflection.memoriesUsed.map((mem, index) => (
                            <Accordion key={index} sx={{ mb: 2 }}>
                                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                                    <MemoryIcon sx={{ color: '#0ca37f', mr: 2 }} />
                                    <Typography noWrap>
                                        {mem.payload.text.length > 50
                                            ? mem.payload.text.slice(0, 80) + '...'
                                            : mem.payload.text}
                                    </Typography>
                                </AccordionSummary>
                                <AccordionDetails>
                                    <Typography variant="body2">
                                        {mem.payload.text}
                                    </Typography>
                                    <Typography variant="caption" color="text.secondary">
                                        Timestamp: {new Date(mem.payload.timestamp).toLocaleString()}
                                    </Typography>
                                </AccordionDetails>
                            </Accordion>
                        ))}
                    </Box>

                    <Box mt={5} textAlign="center">
                        <Button
                            variant="contained"
                            onClick={fetchReflection}
                            sx={{
                                mt: 5,
                                px: 5,
                                py: 1.6,
                                fontSize: '1rem',
                                backgroundColor: '#0ca37f',
                                borderRadius: '30px',
                                textTransform: 'none',
                                fontWeight: 600,
                                '&:hover': {
                                    backgroundColor: '#089a72',
                                },
                            }}
                        >
                            <strong>Generate again</strong>
                        </Button>
                    </Box>
                </CardContent>
            </Box>
        </Container>
    );
};
